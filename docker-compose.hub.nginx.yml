version: '3.8'

# TradingAgents-CN v1.0.0-preview Docker Compose配置（带 Nginx 反向代理）
# 使用Docker Hub镜像 + Nginx 反向代理
#
# 使用方法：
# 1. 复制.env.example为.env并配置环境变量
# 2. 运行: docker-compose -f docker-compose.hub.nginx.yml up -d
# 3. 访问: http://your-server (前端和后端API都通过80端口访问)
#
# 优势：
# - 前端和后端通过同一端口访问，无跨域问题
# - 统一入口，便于配置 HTTPS
# - 可以添加负载均衡、缓存等功能

services:
  # MongoDB数据库
  mongodb:
    image: mongo:4.4
    container_name: tradingagents-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - tradingagents_mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: tradingagents123
      MONGO_INITDB_DATABASE: tradingagents
      TZ: "Asia/Shanghai"
    networks:
      - tradingagents-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: tradingagents-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - tradingagents_redis_data:/data
    environment:
      TZ: "Asia/Shanghai"
    command: redis-server --appendonly yes --requirepass tradingagents123
    networks:
      - tradingagents-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "tradingagents123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # FastAPI后端服务
  backend:
    image: hsliup/tradingagents-backend:latest
    container_name: tradingagents-backend
    restart: unless-stopped
    expose:
      - "8000"
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
      - ./data:/app/data
    env_file:
      - .env
    environment:
      TZ: "Asia/Shanghai"
      TRADINGAGENTS_LOG_LEVEL: "INFO"
      TRADINGAGENTS_LOG_DIR: "/app/logs"
      TRADINGAGENTS_LOG_FILE: "/app/logs/tradingagents.log"
      # MongoDB配置
      MONGODB_HOST: "mongodb"
      MONGODB_PORT: "27017"
      MONGODB_USERNAME: "admin"
      MONGODB_PASSWORD: "tradingagents123"
      MONGODB_DATABASE: "tradingagents"
      MONGODB_AUTH_SOURCE: "admin"
      MONGODB_URL: "mongodb://admin:tradingagents123@mongodb:27017/tradingagents?authSource=admin"
      MONGODB_CONNECTION_STRING: "mongodb://admin:tradingagents123@mongodb:27017/tradingagents?authSource=admin"
      # Redis配置
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: "tradingagents123"
      REDIS_URL: "redis://:tradingagents123@redis:6379/0"
      DOCKER_CONTAINER: "true"
      # 安全配置
      JWT_SECRET: "docker-jwt-secret-key-change-in-production-2024"
      JWT_ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "480"
      REFRESH_TOKEN_EXPIRE_DAYS: "30"
      CSRF_SECRET: "docker-csrf-secret-key-change-in-production-2024"
      BCRYPT_ROUNDS: "12"
      # CORS配置（允许 Nginx 代理）
      CORS_ORIGINS: "*"
      # AI模型API密钥（从.env文件读取，environment部分需要显式声明才能覆盖镜像内的占位符）
      DASHSCOPE_API_KEY: "${DASHSCOPE_API_KEY}"
      DASHSCOPE_ENABLED: "${DASHSCOPE_ENABLED:-false}"
      DEEPSEEK_API_KEY: "${DEEPSEEK_API_KEY}"
      DEEPSEEK_ENABLED: "${DEEPSEEK_ENABLED:-false}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      OPENAI_ENABLED: "${OPENAI_ENABLED:-false}"
      GOOGLE_API_KEY: "${GOOGLE_API_KEY}"
      GOOGLE_ENABLED: "${GOOGLE_ENABLED:-false}"
      BAIDU_API_KEY: "${BAIDU_API_KEY}"
      BAIDU_SECRET_KEY: "${BAIDU_SECRET_KEY}"
      BAIDU_ENABLED: "${BAIDU_ENABLED:-false}"
      OPENROUTER_API_KEY: "${OPENROUTER_API_KEY}"
      OPENROUTER_ENABLED: "${OPENROUTER_ENABLED:-false}"
      # 数据源API密钥
      TUSHARE_TOKEN: "${TUSHARE_TOKEN}"
      TUSHARE_ENABLED: "${TUSHARE_ENABLED:-false}"
      AKSHARE_ENABLED: "${AKSHARE_ENABLED:-true}"
      BAOSTOCK_ENABLED: "${BAOSTOCK_ENABLED:-true}"
      FINNHUB_API_KEY: "${FINNHUB_API_KEY}"
      FINNHUB_ENABLED: "${FINNHUB_ENABLED:-false}"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tradingagents-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Vue 3前端服务
  frontend:
    image: hsliup/tradingagents-frontend:latest
    container_name: tradingagents-frontend
    restart: unless-stopped
    expose:
      - "80"
    environment:
      TZ: "Asia/Shanghai"
      # 前端通过 Nginx 代理访问后端，使用相对路径
      VITE_API_BASE_URL: "/api"
    depends_on:
      - backend
    networks:
      - tradingagents-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: tradingagents-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - tradingagents-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  tradingagents_mongodb_data:
    driver: local
  tradingagents_redis_data:
    driver: local

networks:
  tradingagents-network:
    driver: bridge

