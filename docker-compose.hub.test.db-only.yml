version: '3.8'

# TradingAgents-CN v1.0.0-preview Docker Compose配置 - 测试环境（仅数据库）
# 只启动 MongoDB 和 Redis，用于本地代码测试
#
# 使用方法：
# 1. 启动测试数据库: docker-compose -f docker-compose.hub.test.db-only.yml up -d
# 2. 本地运行代码: .\.venv\Scripts\python -m uvicorn app.main:app --reload
# 3. 停止测试数据库: docker-compose -f docker-compose.hub.test.db-only.yml down
#
# 注意：
# - 此配置使用 tradingagents_test_* 数据卷名，不会影响现有数据
# - 端口映射与生产环境相同，需要先停止生产环境的数据库容器

services:
  # MongoDB数据库
  mongodb:
    image: mongo:4.4
    container_name: tradingagents-mongodb-test
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - tradingagents_test_mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: tradingagents123
      MONGO_INITDB_DATABASE: tradingagents
      TZ: "Asia/Shanghai"
    networks:
      - tradingagents-test-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: tradingagents-redis-test
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - tradingagents_test_redis_data:/data
    environment:
      TZ: "Asia/Shanghai"
    command: redis-server --appendonly yes --requirepass tradingagents123
    networks:
      - tradingagents-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "tradingagents123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  tradingagents_test_mongodb_data:
    driver: local
  tradingagents_test_redis_data:
    driver: local

networks:
  tradingagents-test-network:
    driver: bridge

