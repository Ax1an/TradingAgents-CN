apiVersion: v1
kind: Namespace
metadata:
  name: tradingagents
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: data-service-config
  namespace: tradingagents
data:
  DATA_SERVICE_HOST: "0.0.0.0"
  DATA_SERVICE_PORT: "8001"
  DATA_SERVICE_WORKERS: "2"
  MONGODB_ENABLED: "true"
  MONGODB_HOST: "mongodb-service"
  MONGODB_PORT: "27017"
  MONGODB_DATABASE: "tradingagents"
  MONGODB_AUTH_SOURCE: "admin"
  REDIS_ENABLED: "true"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  TRADINGAGENTS_LOG_LEVEL: "INFO"
---
apiVersion: v1
kind: Secret
metadata:
  name: data-service-secrets
  namespace: tradingagents
type: Opaque
stringData:
  MONGODB_USERNAME: "admin"
  MONGODB_PASSWORD: "tradingagents123"
  REDIS_PASSWORD: "tradingagents123"
  TUSHARE_TOKEN: "your-tushare-token"
  FINNHUB_API_KEY: "your-finnhub-key"
  DASHSCOPE_API_KEY: "your-dashscope-key"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-service
  namespace: tradingagents
  labels:
    app: data-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: data-service
  template:
    metadata:
      labels:
        app: data-service
    spec:
      containers:
      - name: data-service
        image: tradingagents/data-service:latest
        ports:
        - containerPort: 8001
        envFrom:
        - configMapRef:
            name: data-service-config
        - secretRef:
            name: data-service-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: data-service
  namespace: tradingagents
  labels:
    app: data-service
spec:
  selector:
    app: data-service
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: data-service-ingress
  namespace: tradingagents
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: data-api.tradingagents.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: data-service
            port:
              number: 8001
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: tradingagents
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: tradingagents
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: "tradingagents123"
        - name: MONGO_INITDB_DATABASE
          value: "tradingagents"
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: tradingagents
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: tradingagents
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--requirepass", "tradingagents123"]
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: tradingagents
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
